server:
  port: 8082

spring:
  application:
    name: auth-service
  security:
    jwt:
      issuer-uri: http://localhost:8082
      private-key-location: classpath:keys/private.pem
      public-key-location: classpath:keys/public.pem
      jwk-set-uri: http://localhost:8082/.well-known/jwks.json
      expiration:
        access: 30m  # 30 минут
        refresh: 30d  # 30 дней


      cookie:
        name: "refresh_token"
        path: /api/v1/auth
        secure: true
        http-only: true
        same-site: Strict
        max-age: 30d  # Duration format
        domain: "localhost"


  jpa:
    hibernate:
      ddl-auto: none

  datasource:
    username: root
    url: jdbc:postgresql://localhost:5432/auth_service_db
    password: admin

  kafka:
    bootstrap-servers: localhost:9094,localhost:9095
    topics:
      user-registration: user-registration-topic
      user-registration-dlq: user-registration-dlq
      password-reset: password-reset-topic
      password-reset-dlq: password-reset-dlq
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url:  http://localhost:8081  # Schema Registry ???????? ?? 8081
        auto.register.schemas: true
        use.latest.version: true
    consumer:
      group-id: auth-service-consumer-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://localhost:8081
        specific.avro.reader: true

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true  # важно для существующих БД
    schemas: public

  data:
    redis:
      host: localhost  # или IP вашего Redis сервера
      port: 6379       # стандартный порт Redis
      password:        # если у вас установлен пароль
      timeout: 5000    # таймаут подключения в миллисекундах
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

app:
  redis:
    prefixes:
      token: "pwd_reset:token:"
      email: "pwd_reset:email:"
      auth-session: "session:"
    ttl:
      password-reset: 1h     # 1 час
      email-verification: 24h # 24 часа
      auth-session: 7d      # 7 дней


springdoc:
  swagger-ui:
    path: /swagger-ui/index.html  # стандартный путь
    tags-sorter: alpha      # сортировка тегов по алфавиту
    operations-sorter: alpha # сортировка операций по алфавиту
    persistAuthorization: true  # Сохранять авторизацию между перезагрузками
    withCredentials: true       # Разрешить передачу cookies
  api-docs:
    path: /v3/api-docs      # путь к JSON-спецификации OpenAPI

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true  # Должно быть true!
    fetch-registry: true


logging:
  level:
    root: INFO                 # общий уровень логов (можно DEBUG для всего)
    org.springframework.security: DEBUG   # для Spring Security подробный лог
    org.springframework.web: DEBUG        # для веб-слоя (контроллеры, фильтры)
    reactor.netty: DEBUG                   # если используете Netty (WebFlux)
    com.example: DEBUG                    # ваш пакет, чтобы видеть логи вашего кода


